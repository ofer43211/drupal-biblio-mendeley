<?php
// $Id$
/**
 *   biblio_mendeley.module for Drupal
 *
 *   Copyright (C) 2010  Jakob Stoeck
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License along
 *   with this program; if not, write to the Free Software Foundation, Inc.,
 *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 */

/**
 * Get Mendeley API Connector
 *
 * @return Mendeley
 * 	Mendeley Open API Client
 */
function biblio_mendeley_get_mendeley_client() {
	static $mendeley;

	if(empty($mendeley)) {
		require_once 'sites/all/libraries/mendeleyapi/Mendeley.php';
		require_once 'sites/all/libraries/mendeleyapi/MendeleyBiblioDoc.php';
		$mendeley = new Mendeley(variable_get('biblio_mendeley_consumer_key', NULL), variable_get('biblio_mendeley_consumer_secret', NULL));
	}

	return $mendeley;
}

/**
 * @return array of group id => group name
 */
function biblio_mendeley_get_groups() {
	$mendeley = biblio_mendeley_get_mendeley_client();
	$mendeley_groups = $mendeley->get('groups');
	foreach ($mendeley_groups as $m) {
		$mendeley_group_options[$m->id] = $m->name;
	}
	return $mendeley_group_options;
}

/**
 * Implements hook_perm()
 */
function biblio_mendeley_perm() {
	return array(
		'insert mendeley documents',
		'update mendeley documents',
		'delete mendeley documents',
	);
}

/**
 * Returns an array of groups of the user
 *
 * @param bool $activated_only return only groups which are selected in the admin form
 * @return array $group id => group name
 */
function biblio_mendeley_groups($activated_only = FALSE) {
	$mendeley = biblio_mendeley_get_mendeley_client();
	$groups = array();
	try {
		$mendeley_groups = $mendeley->get('groups');
		foreach ($mendeley_groups as $m) {
			$groups[$m->id] = $m->name;
		}
	} catch (Exception $e) {} // happens e.g. without internet connection
	if ($activated_only) {
		$groups = array_intersect_key($groups, array_flip(variable_get('biblio_mendeley_group_ids', array())));
	}
	return $groups;
}

/**
 * Returns an array of vocabularies of the user
 *
 * @return array vocabulary id => vocabulary name
 */
function biblio_mendeley_vocabularies() {
	$vocabularies = module_invoke('taxonomy', 'get_vocabularies');
	$taxo_options = array(
		0 => '<'. t('none') .'>',
	);
  if(count($vocabularies)) {
    foreach ($vocabularies as $voc) {
      $taxo_options[$voc->vid] = $voc->name;
    }
	}
	return $taxo_options;
}

/**
 * Uses system_settings_form
 */
function biblio_mendeley_admin() {
	$form = array();

	$form['local_sync'] = array(
		'#type' => 'fieldset',
		'#title' => t('Local Sync'),
		'#collapsible' => TRUE,
	);

	$form['local_sync']['biblio_mendeley_sync_local'] = array(
		'#type' => 'checkbox',
		'#title' => t('Synchronize local Biblio nodes'),
		'#default_value' => variable_get('biblio_mendeley_sync_local', FALSE),
		'#description' => t('Update/delete/add documents in Biblio if changed in Mendeley.'),
	);

	$form['local_sync']['biblio_mendeley_sync_amount'] = array(
		'#type' => 'textfield',
		'#title' => t('Update Amount'),
		'#default_value' => variable_get('biblio_mendeley_sync_amount', 10),
		'#size' => 30,
		'#maxlength' => 60,
		'#description' => t('How many existing Biblio nodes should be checked for updates with Mendeley in one run. Don\'t set this number too high or you could reach the Mendeley rate limit.'),
	);

	$form['local_sync']['biblio_mendeley_tag_vocabulary'] = array(
		'#type' => 'select',
		'#title' => t('Vocabulary'),
		'#default_value' => variable_get('biblio_mendeley_tag_vocabulary', 0),
		'#options' => biblio_mendeley_vocabularies(),
		'#description' => t('Choose a taxonomy if you want to sync Mendeley tags with a taxonomy of Biblio nodes. Note: This has no influence on Mendeley or Biblio keywords.'),
		'#multiple' => FALSE,
	);

	$form['remote_sync'] = array(
		'#type' => 'fieldset',
		'#title' => t('Remote Sync'),
		'#collapsible' => TRUE,
	);

	$form['remote_sync']['biblio_mendeley_sync_remote'] = array(
		'#type' => 'checkbox',
		'#title' => t('Synchronize remote Mendeley documents'),
		'#default_value' => variable_get('biblio_mendeley_sync_remote', FALSE),
		'#description' => t('Update/delete/add documents in Mendeley if changed in Biblio.'),
	);

	$form['mendeley'] = array(
		'#type' => 'fieldset',
		'#title' => 'Mendeley',
		'#collapsible' => TRUE,
	);

<<<<<<< HEAD
	$form['mendeley']['biblio_mendeley_group_ids'] = array(
=======
	$form['group']['biblio_mendeley_group_ids'] = array(
>>>>>>> 92c79f93c9044c82c851693dd2ab194db21a3559
		'#type' => 'select',
		'#multiple' => TRUE,
		'#title' => t('Enabled Groups'),
		'#required' => FALSE,
		'#default_value' => variable_get('biblio_mendeley_group_ids', variable_get('biblio_mendeley_group_id', NULL)), // backward-compatible with older single group_id
<<<<<<< HEAD
		'#options' => biblio_mendeley_groups(),
=======
		'#options' => biblio_mendeley_get_groups(),
>>>>>>> 92c79f93c9044c82c851693dd2ab194db21a3559
		'#size' => 5,
		'#description' => t('The Mendeley groups to which uploaded documents may be added. If empty, uploads to the private library of the Mendeley API consumer key owner.'),
	);

	$form['mendeley']['biblio_mendeley_consumer_key'] = array(
		'#type' => 'textfield',
		'#title' => t('Mendeley API Consumer Key'),
		'#default_value' => variable_get('biblio_mendeley_consumer_key', NULL),
		'#size' => 30,
		'#maxlength' => 60,
		'#description' => t('This value overrides the default setting in mendeleyapi/Configuration.php.'),
	);

	$form['mendeley']['biblio_mendeley_consumer_secret'] = array(
		'#type' => 'textfield',
		'#title' => t('Mendeley API Consumer Secret'),
		'#default_value' => variable_get('biblio_mendeley_consumer_secret', NULL),
		'#size' => 30,
		'#maxlength' => 60,
		'#description' => t('This value overrides the default setting in mendeleyapi/Configuration.php.'),
	);

	$form['mendeley']['biblio_mendeley_upper_limit'] = array(
		'#type' => 'textfield',
		'#title' => t('Mendeley Upper Limit'),
		'#default_value' => variable_get('biblio_mendeley_upper_limit', 100000),
		'#size' => 30,
		'#maxlength' => 60,
		'#description' => t('The Mendeley API needs an upper limit. This should be higher than the amount of your Mendeley files.'),
	);
	$form = system_settings_form($form);
	$form['#submit'][] = 'biblio_mendeley_admin_submit';
	$form['#submit'][] = 'biblio_mendeley_synchronize';
	$form['consumer']['#suffix'] = '<p>' . t('Synchronization runs on cron and on save configuration.') . '</p>';

	return $form;
}

/**
 * Implements hook_menu()
 */
function biblio_mendeley_menu() {
	$items = array();

	$items['admin/settings/biblio-mendeley'] = array(
		'title' => 'Biblio Mendeley',
		'description' => 'Edit Biblio Mendeley Settings',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('biblio_mendeley_admin'),
		'access arguments' => array('access administration pages'),
		'type' => MENU_NORMAL_ITEM,
	 );

	$items['admin/settings/biblio-mendeley/synchronize'] = array(
		'title' => 'Biblio Mendeley Synchronize',
		'description' => 'Synchronize Biblio Mendeley manually',
		'page callback' => 'biblio_mendeley_synchronize',
		'page arguments' => array('biblio_mendeley_admin'),
		'access arguments' => array('access administration pages'),
		'type' => MENU_CALLBACK,
	 );

	$items['admin/settings/biblio-mendeley/delete-local-nodes'] = array(
		'title' => 'Biblio Mendeley Delete Local Nodes',
		'description' => 'Delete all local biblio nodes so you can re-import them later on',
		'page callback' => 'biblio_mendeley_delete_local_nodes',
		'page arguments' => array('biblio_mendeley_admin'),
		'access arguments' => array('access administration pages'),
		'type' => MENU_CALLBACK,
	 );

	return $items;
}

/**
 * Deletes all local biblio nodes so you can re-import them later on
 */
function biblio_mendeley_delete_local_nodes() {
	$result = db_query('SELECT nid FROM {biblio_mendeley}');
	biblio_mendeley_is_synchronizing(TRUE);
	while($r = db_fetch_array($result)) {
		node_delete($r['nid']);
	}
	biblio_mendeley_is_synchronizing(FALSE);
	db_query('TRUNCATE {biblio_mendeley}');
	drupal_set_message(t('Deleted all biblio mendeley nodes.'));
	drupal_goto('admin/settings/biblio-mendeley');
}

/**
 * Implements hook_node_form_alter()
 */
function biblio_mendeley_form_biblio_node_form_alter(&$form, &$form_state) {
  $form['biblio_mendeley_doc_id'] = array(
    '#type' => 'value',
    '#value' => $form_state['values']['biblio_mendeley_doc_id']
  );
}

/**
 * Implements hook_nodeapi()
 */
function biblio_mendeley_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if(($node->type === 'biblio') && !biblio_mendeley_is_synchronizing()) {
		switch($op) {
			case 'delete':
				if(user_access('delete mendeley documents')) {
					if(variable_get('biblio_mendeley_sync_remote', FALSE)) {
						_biblio_mendeley_delete_remote($node);
					}
					_biblio_mendeley_delete_local($node);
				}
			break;

			case 'insert':
				if(user_access('insert mendeley documents') && variable_get('biblio_mendeley_sync_remote', FALSE)) {
					_biblio_mendeley_insert_remote($node);
				}
			break;

			case 'update':
				if(user_access('update mendeley documents') && variable_get('biblio_mendeley_sync_remote', FALSE)) {
					_biblio_mendeley_update_remote($node);
				}
			break;
		}
	}
}

/**
 * Indicates if biblio_mendeley_synchronize is running
 *
 * A flag to e.g. disable nodeapi hooks while mass-inserting
 *
 * @param boolean $default
 */
function biblio_mendeley_is_synchronizing($default = FALSE) {
	static $status;
	if($status !== TRUE && $status !== FALSE) {
		$status = $default;
	}
	return $status;
}

/**
 * Implements hook_cron()
 */
function biblio_mendeley_cron() {
	if(variable_get('biblio_mendeley_sync_local', FALSE)) {
		biblio_mendeley_synchronize();
	}
}

/**
 * For each document in the group it parses the local biblio entries. If they differ, they get replaced by the Mendeley content.
 *
 * All local content which was not uploaded to Mendeley will be erased. Make sure, all users have "insert mendeley document" privileges.
 */
function biblio_mendeley_synchronize() {
	if (!variable_get('biblio_mendeley_sync_local', FALSE)) {
		return;
	}
	$mendeley = biblio_mendeley_get_mendeley_client();
	$remote_group_ids = array();
	foreach (biblio_mendeley_groups(TRUE) as $group_id => $group_name) {
		try {
			$group = $mendeley->getGroupDocuments($group_id, array('items' => variable_get('biblio_mendeley_upper_limit', 100000)));
			if($group->total_pages != 1) {
				// logic works only with the whole set of documents but Mendeley allows only an upper limit
				throw new Exception(t('Couldn\'t fetch all documents at once, perhaps because there are more than %max_results Mendeley documents. Please change the upper limit in the Biblio Mendeley settings.', array('%max_results' => variable_get('biblio_mendeley_upper_limit', 100000))));
			}
			$remote_group_ids[] = (array)$group->document_ids;
		} catch(Exception $e) {
			$message = t('Error while synchronizing "%group": %error', array(
				'%group' => $group_name,
				'%error' => $e->getMessage(),
			));
			watchdog('error', $message);
			drupal_set_message($message, 'error');
			return;
		}

		// get list of doc ids and node ids
		$local_group_ids = array_filter((array)_biblio_mendeley_get_doc_id());
		$remote_group_ids = array_filter($remote_group_ids);

		$to_be_deleted = array_diff($local_group_ids, $remote_group_ids);
		$to_be_inserted = array_diff($remote_group_ids, $local_group_ids);
		$to_be_updated = array_intersect($local_group_ids, $remote_group_ids);

		drupal_set_message(t('Trying to delete %delete, insert %insert and looking for updates of %update biblio documents.', array(
			'%delete' => count($to_be_deleted),
			'%insert' => count($to_be_inserted),
			'%update' => count($to_be_updated),
		)), 'status');

		$success = array(
			'delete' => 0,
			'insert' => 0,
			'update' => 0,
		);

		biblio_mendeley_is_synchronizing(TRUE);
		// we need to switch to a user with update, delete, insert privileges
		global $user;
		$original_user = $user;
		$user = user_load(1);

		foreach($to_be_deleted as $nid => $biblio_mendeley_doc_id) {
			$node = new stdClass();
			$node->nid = $nid;
			_biblio_mendeley_delete_local($node);
			node_delete($node->nid);
			_biblio_mendeley_calm_the_cache();
			$success['delete']++;
		}

		foreach($to_be_inserted as $biblio_mendeley_doc_id) {
			$doc = MendeleyBiblioDoc::constructWithDocumentId($biblio_mendeley_doc_id);
			$node = $doc->toNode();
			_biblio_mendeley_insert_local($node);
			_biblio_mendeley_calm_the_cache();
			$success['insert']++;
		}

		$update_amount = variable_get('biblio_mendeley_sync_amount', 0);

		foreach($to_be_updated as $nid => $biblio_mendeley_doc_id) {
			if($update_amount-- <= 0) {
				break;
			}
			$node = node_load($nid, NULL, TRUE);
			$node->biblio_mendeley_doc_id = $biblio_mendeley_doc_id;
			$updated = _biblio_mendeley_update_local($node);
			_biblio_mendeley_calm_the_cache();
			if($updated === true) {
				$success['update']++;
			}
		}

		$user = $original_user;
		biblio_mendeley_is_synchronizing(FALSE);
		drupal_set_message(t('Deleted %delete, inserted %insert and updated %update biblio documents in group "%group".', array(
			'%delete' => $success['delete'],
			'%insert' => $success['insert'],
			'%update' => $success['update'],
			'%group' => $group_name,
		)), 'status');
	}
}

/**
 * Empty the node cache every n-th time.
 *
 * node_delete and node_save use node_load which builds a static node cache. This grows too large with too many nodes.
 *
 * @param int $clear_every
 */
function _biblio_mendeley_calm_the_cache($clear_every = 10) {
	static $i;

	if(empty($i) && $i !== 0) {
		$i = 0;
	} else {
		$i++;
		if($i % $clear_every === 0) {
			node_load(FALSE, NULL, TRUE);
		}
	}
}

/**
 * Get Mendeley doc ids
 *
 * @param stdClass $node
 * 	if NULL, returns all Mendeley doc ids currently in Biblio
 * @return mixed
 * 	array of document ids or string
 */
function _biblio_mendeley_get_doc_id($node = NULL) {
	if($node === NULL) {
		$query = db_query('SELECT biblio_mendeley_doc_id, nid FROM {biblio_mendeley} ORDER BY biblio_mendeley_last_sync');
		$documentIds = array();
		while($return = db_fetch_object($query)) {
			$document_ids[$return->nid] = $return->biblio_mendeley_doc_id;
		}
		return $document_ids;
	} elseif(isset($node->nid)) {
		return db_result(db_query('SELECT biblio_mendeley_doc_id FROM {biblio_mendeley} WHERE nid = %d', $node->nid));
	}
}

function _biblio_mendeley_get_node_id($document_id) {
	return db_result(db_query('SELECT nid FROM {biblio_mendeley} WHERE biblio_mendeley_doc_id = "%s"', $document_id));
}

/**
 * Locally delete a Biblio node (without changing Mendeley)
 *
 * @param stdClass $node
 */
function _biblio_mendeley_delete_local($node) {
	db_query('DELETE FROM {biblio_mendeley} WHERE nid = %d', $node->nid);
}

/**
 * Locally update a Biblio node (without changing Mendeley)
 *
 * @param stdClass $node
 * @return stdClass
 */
function _biblio_mendeley_update_local($node) {
	$updated = false;
	try {
		$remote = MendeleyBiblioDoc::constructWithDocumentId($node->biblio_mendeley_doc_id);
		$local = MendeleyBiblioDoc::constructWithNode($node);
		$skip = MendeleyBiblioDoc::notMapped();
		foreach($remote as $key => $remoteValue) {
			if(!in_array($key, $skip) && (trim($remoteValue) != trim($local->$key))) {
				if(Configuration::DEBUG > 0) {
					var_dump(array('first difference in ' . $node->title . ' (' . $node->biblio_mendeley_doc_id . ') for ' . $key => array('remote' => $remoteValue, 'local' => $local->$key)));
				}
				$node = $remote->toNode($node->nid);
				$node->vid = $node->nid; // set vid to update a node
				node_save($node);
				if($remote->tags != $local->tags) {
					_biblio_mendeley_insert_tags($node);
				}
				$updated = true;
				break;
			}
		}
		$node->biblio_mendeley_last_sync = time();
		drupal_write_record('biblio_mendeley', $node, 'nid');
		return $updated;
	} catch(Exception $e) {
		drupal_set_message(t('An error occured, this is mostly due to the Mendeley rate limit: ') . $e->getMessage(), 'error');
		watchdog('biblio error', $e->getMessage());
	}
}

/**
 * Locally insert a Biblio node (without changing Mendeley)
 *
 * @param stdClass $node
 * @return stdClass
 */
function _biblio_mendeley_insert_local($node) {
	$node->mendeley_group_id[0]['value'] = $node->group_id;
	node_save($node);
	$node->biblio_mendeley_last_sync = time();
	drupal_write_record('biblio_mendeley', $node);
	_biblio_mendeley_insert_tags($node);
	return $node;
}

/**
 * Adds tags to a node
 *
 * @param stdClass $node
 * @param array $tags
 */
function _biblio_mendeley_insert_tags($node) {
	if(($taxonomy_id = (int)variable_get('biblio_mendeley_tag_vocabulary', 0)) && $taxonomy_id !== 0 && !empty($node->taxonomy)) {
		taxonomy_node_save($node, array('tags' => array($taxonomy_id => implode(',', $node->taxonomy))));
	}
}

/**
 * Deletes Mendeley document
 *
 * @param stdClass $node
 */
function _biblio_mendeley_delete_remote($node) {
	if($biblio_mendeley_doc_id = _biblio_mendeley_get_doc_id($node)) {
		$mendeley = biblio_mendeley_get_mendeley_client();
		$mendeley->delete('documents/' . $biblio_mendeley_doc_id);
		drupal_set_message(t('Deleted Mendeley document with id %id', array('%id' => $response->document_id)));
	}
}

/**
 * Updates Mendeley document
 *
 * Since the Mendeley API doesn't support updating we inserted a new document and delete the old one.
 *
 * @param stdClass $node
 */
function _biblio_mendeley_update_remote($node) {
	if($biblio_mendeley_doc_id = _biblio_mendeley_get_doc_id($node)) {
		$mendeley = biblio_mendeley_get_mendeley_client();
		$biblioDoc = MendeleyBiblioDoc::constructWithNode($node, variable_get('biblio_mendeley_group_id', NULL));
		try {
			$response = $mendeley->post('documents', $biblioDoc->toParams());
			$mendeley->delete('documents/' . $biblio_mendeley_doc_id);

			if($response->document_id) {
				$node->biblio_mendeley_doc_id = $response->document_id;
				$node->biblio_mendeley_last_sync = time();
				drupal_write_record('biblio_mendeley', $node, 'nid');
				drupal_set_message(t('Updated Mendeley document with new id %id', array('%id' => $response->document_id)));
			}
		} catch(Exception $e) {
			drupal_set_message($e->getMessage(), 'error');
		}
	}
}

/**
 * Inserts new Mendeley document
 *
 * @param stdClass $node
 */
function _biblio_mendeley_insert_remote($node) {
	$mendeley = biblio_mendeley_get_mendeley_client();
	$biblioDoc = MendeleyBiblioDoc::constructWithNode($node, $node->mendeley_group_id[0]['value']);
	try {
		$response = $mendeley->post('documents', $biblioDoc->toParams());

		if($response->document_id) {
			$node->biblio_mendeley_doc_id = $response->document_id;
			$node->biblio_mendeley_last_sync = time();
			drupal_write_record('biblio_mendeley', $node);
			drupal_set_message(t('Inserted Mendeley document with new id %id', array('%id' => $response->document_id)));
		}
	} catch(Exception $e) {
		drupal_set_message($e->getMessage(), 'error');
	}
}
